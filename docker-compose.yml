# Use postgres/example user/password credentials
version: '3.1'

services:

  arangodb:
    image: arangodb:3.11
    ports:
      - "8529:8529"
    environment:
#      ARANGO_ROOT_PASSWORD: "changeme"
      ARANGO_NO_AUTH: "1"
    volumes:
      - arango-data:/var/lib/arangodb3

  cm:
    depends_on:
      - arangodb
      - redpanda
    image: ghcr.io/hpcclab/oaas/class-manager
    build:
      context: oparaca-manager
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - "8088:8080"
    environment:
      QUARKUS_CONSOLE_COLOR: 'true'
      QUARKUS_HTTP_CORS: 'true'
      KAFKA_BOOTSTRAP_SERVERS: PLAINTEXT://redpanda:9092
      OAAS_OC_PROVISIONTOPIC: msc-provisions
      OAAS_OC_KAFKAENABLED: 'true'
      OAAS_OC_STORAGEADAPTERURL: http://sa:8080
      OPRC_DB_PKG_HOST: arangodb
      OPRC_DB_PKG_PORT: "8529"
      OPRC_DB_PKG_DB: oaas
      OPRC_DB_PKG_USER: root
      OPRC_DB_PKG_PASS: changeme
    restart: on-failure
    healthcheck: &oaas-healthcheck
      test: curl --fail http://localhost:8080/q/health || exit 1
      interval: 10s
      retries: 5
      timeout: 10s

  sa:
    build:
      context: storage-adapter
      dockerfile: src/main/docker/Dockerfile.jvm
    image: ghcr.io/hpcclab/oaas/storage-adapter
    ports:
      - "8090:8080"
    environment:
      QUARKUS_CONSOLE_COLOR: 'true'
      OAAS_SA_S3_URL: http://s3:9000
      OAAS_SA_S3_BUCKET: oaas
      OAAS_SA_S3_ACCESSKEY: minio_access_key
      OAAS_SA_S3_SECRETKEY: minio_secret_key
      OAAS_SA_S3_PUBLICURL: http://localhost:9000
      OPRC_DB_PKG_HOST: arangodb
      OPRC_DB_PKG_PORT: "8529"
      OPRC_DB_PKG_DB: oaas
      OPRC_DB_PKG_USER: root
      OPRC_DB_PKG_PASS: changeme
    healthcheck: *oaas-healthcheck
    restart: on-failure

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v23.1.13
    command:
      - redpanda start
      - --smp 1
      # The amount of memory to make available to Redpanda.
      - --memory 1G
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
#    volumes:
#      - redpanda:/var/lib/redpanda/data
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.+true' || exit 1" ]
      interval: 15s
      timeout: 3s
      retries: 5

  console:
    deploy:
      replicas: 0
    image: docker.redpanda.com/redpandadata/console:v2.3.1
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - "8001:8080"
    depends_on:
      - redpanda

  s3:
    image: bitnami/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
      MINIO_API_CORS_ALLOW_ORIGIN: '*'
      MINIO_DEFAULT_BUCKETS: oaas

  invoker:
    depends_on:
      - arangodb
      - redpanda
    image: ghcr.io/hpcclab/oaas/invoker
    build:
      context: invoker
      dockerfile: src/main/docker/Dockerfile.jvm
    deploy:
      replicas: 1
    ports:
      - "8089:8080"
    environment: &invoker-env
      QUARKUS_CONSOLE_COLOR: 'true'
      QUARKUS_HTTP_CORS: 'true'
      OAAS_LOG: DEBUG
      OAAS_INVOKER_KAFKA: PLAINTEXT://redpanda:9092
      OAAS_INVOKER_STORAGEADAPTERURL: http://sa:8080
      OAAS_INVOKER_S3_URL: http://s3:9000
      OAAS_INVOKER_S3_BUCKET: oaas
      OAAS_INVOKER_S3_ACCESSKEY: minio_access_key
      OAAS_INVOKER_S3_SECRETKEY: minio_secret_key
      OAAS_INVOKER_S3_PUBLICURL: http://localhost:9000
      OAAS_INVOKER_USESA: "false"
      OAAS_INVOKER_RESPPUBS3: "true"
      OAAS_INVOKER_CLUSTERLOCK: "false"
      OPRC_DB_PKG_HOST: arangodb
      OPRC_DB_PKG_PORT: "8529"
      OPRC_DB_PKG_DB: oaas
      OPRC_DB_PKG_USER: root
      OPRC_DB_PKG_PASS: changeme
      OPRC_DB_DEFAULT_HOST: arangodb
      OPRC_DB_DEFAULT_PORT: "8529"
      OPRC_DB_DEFAULT_DB: oaas
      OPRC_DB_DEFAULT_USER: root
      OPRC_DB_DEFAULT_PASS: changeme
      OPRC_DB_INV_HOST: arangodb
      OPRC_DB_INV_PORT: "8529"
      OPRC_DB_INV_DB: oaas
      OPRC_DB_INV_USER: root
      OPRC_DB_INV_PASS: changeme
    restart: on-failure
    healthcheck: *oaas-healthcheck

  invoker-n:
    image: ghcr.io/hpcclab/oaas/invoker
    depends_on:
      - arangodb
      - redpanda
      - invoker
    deploy:
      replicas: 2
    environment:
      *invoker-env
    restart: on-failure
    healthcheck: *oaas-healthcheck

  orbit:
    build:
      context: orbit-manager
      dockerfile: src/main/docker/Dockerfile.jvm
    image: ghcr.io/hpcclab/oaas/orbit-manager
    deploy:
      replicas: 0
    healthcheck: *oaas-healthcheck

  json-update-fn:
    build:
      context: example/functions/json-update-fn-py
    image: ghcr.io/hpcclab/oaas/json-update-fn-py
    ports:
      - 10001:8080
    environment:
      LOG_LEVEL: DEBUG

  concat-fn:
    build:
      context: example/functions/concat-fn-py
    image: ghcr.io/hpcclab/oaas/concat-fn-py
    ports:
      - 10002:8080
    environment:
      LOG_LEVEL: DEBUG

  transcode-fn:
    build:
      context: example/functions/transcode-fn-py
    image: ghcr.io/hpcclab/oaas/transcode-fn-py
    ports:
      - 10003:8080
    environment:
      LOG_LEVEL: DEBUG

volumes:
  minio-data:
  arango-data:
